@use '/src/scss/variables' as *;
@use '/src/scss/mixins' as *;

.hero {
  display: grid;
  min-height: 100vh; // Ensure the hero section takes the full viewport height
  grid-template-columns:
    repeat(2, 1fr)
    [start-display] repeat(4, 1fr) [end-display]
    repeat(6, 1fr);
  grid-template-rows: 1fr 0.55fr;
  background-image: url('/images/Hur.png');
  background-size: cover;
  background-attachment: fixed;

  @include respond(laptop-md) {
    grid-template-columns:
      repeat(1, 1fr)
      [start-display] repeat(6, 1fr) [end-display]
      repeat(5, 1fr);
  }

  @include respond(laptop-sm) {
    background-image: linear-gradient(
        rgba(255, 255, 255, 0.4),
        rgba(255, 255, 255, 0.3)
      ),
      url(/images/home-md.webp);
  }

  @include respond(tab-land) {
    grid-template-columns:
      repeat(1, 1fr)
      [start-display] repeat(6, 1fr) [end-display]
      repeat(1, 1fr);
    background-image: linear-gradient(
        rgba(255, 255, 255, 0.4),
        rgba(255, 255, 255, 0.3)
      ),
      url(/images/home-md.webp);
  }

  @include respond(phone-lg) {
    grid-template-columns: [start-display] repeat(6, 1fr) [end-display];
    background-image: linear-gradient(
        rgba(255, 255, 255, 0.4),
        rgba(255, 255, 255, 0.3)
      ),
      url(/images/home-sm.webp);
  }

  .hero-display--1 {
    width: 100vw;
    position: relative;
    top: 10rem;
    right: -40rem;
    display: flex;
    justify-content: center; // Center content horizontally
    align-items: center; // Center content vertically within the container
    text-align: center; // Ensure text within the button is centered
    margin-bottom: 4px;
    flex-direction: column;

    h1 {
      font-size: 6rem;
      margin-bottom: 5.5rem; // Space between the heading and the button
    }

    .button {
      position: relative; // Position the button relatively within the container
      bottom: 20px;
      padding: 1rem 2rem;
      font-size: 2.5rem;
      background-color: $color-primary; // Replace with your primary color variable
      color: $color-white; // Replace with your white color variable
      border: none;
      border-radius: 5px;
      cursor: pointer;
      transition: background-color 0.3s ease-in-out;

      &:hover {
        background-color: darken(
          $color-primary,
          10%
        ); // Darken the primary color by 10% on hover
      }
    }
  }

  &-display--2 {
    grid-row: 2/3;
    grid-column: start-display / end-display;
    background-color: rgba(255, 255, 255, 0.75);
    align-items: flex-end;
    justify-content: flex-start;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-left: -8rem;
  }
}

.make-burger {
  height: 40vh;
  background-image: linear-gradient(
      rgba($color-black, 0.75),
      rgba($color-black, 0.75)
    ),
    url(/images/make-burger.webp);
  background-size: cover;
  background-position: 50%;
  display: grid;
  justify-content: center;
  align-content: center;
  text-align: center;
  justify-items: center;
  grid-row-gap: 1.5rem;

  @include respond(laptop-sm) {
    background-image: linear-gradient(
        rgba($color-black, 0.75),
        rgba($color-black, 0.75)
      ),
      url(/images/make-burger-md.webp);
  }

  @include respond(tab-land) {
    padding: 2rem;
    grid-row-gap: 2.5rem;
  }

  @include respond(tab-port) {
    padding: 2rem;
    grid-row-gap: 3rem;
    background-image: linear-gradient(
        rgba($color-black, 0.75),
        rgba($color-black, 0.75)
      ),
      url(/images/make-burger-sm.webp);
  }
}

.popular-burgers {
  min-height: 100vh;
  background-color: $color-secondary;
  padding: 4rem;

  display: flex;
  flex-direction: column;
  gap: 5rem;

  @include respond(phone-lg) {
    padding: 4rem 2rem;
  }

  @include respond(phone-sm) {
    padding: 3rem 1rem;
  }

  &__cards {
    display: grid;
    gap: 1.5rem;
    grid-template-columns: repeat(auto-fit, minmax(40rem, 1fr));
    padding: 0 25rem;

    @include respond(desktop) {
      padding: 0 15rem;
    }

    @include respond(desktop-sm) {
      padding: 0 10rem;
      grid-template-columns: repeat(auto-fit, minmax(35rem, 1fr));
    }

    @include respond(laptop-md) {
      padding: 0 5rem;
    }

    @include respond(laptop-sm) {
      padding: 0 2rem;
    }

    @include respond(tab-land) {
      grid-template-columns: repeat(auto-fit, minmax(30rem, 1fr));
      padding: 0;
    }
  }
}
